<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>7</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1239</x>
      <y>1792</y>
      <w>504</w>
      <h>728</h>
    </coordinates>
    <panel_attributes>Movie
--
--
/* Atttributes */
std::string				__yearReleased;	// startYear in data set
std::string				__rating;
List&lt;std::string&gt;*		__genres;
std::string				__title;
std::string				__movieID;
std::string				__runtimeMinutes;

/* toggle between various comparisons:
1 by movieID
2 by rating
3 by year 
4 by title 
5 by runtime */
int						__compareConfig;
--
public:
/* Ctors &amp; Dtor */
	// default comparison is by movie id
+ 	Movie();
+ 	Movie(std::string tconstID, std::string title, 
		std::string year, std::string runTime, const List&lt;std::string&gt;&amp; genres);
		
/* Mutators */
+ void clear();
+ void setCompareByID() { __compareConfig = 1; }
+ void setCompareByRating() { __compareConfig = 2; }
+ void setCompareByYear() { __compareConfig = 3;  }
+ void setCompareByTitle() { __compareConfig = 4; }
+ void setCompareByRuntime() { __compareConfig = 5;  }

/* Getters */
+ 	List&lt;std::string&gt; getGenres() const { return *__genres; }
+ std::string getTitle() const { return __title;  }
+ std::string getID() const;
//const List&lt;Actor*&gt;* getActors() const;
+ void readFullInfo() const;
+ 	double getRating() const;

/* Operator Overloads */
	+ friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const Movie&amp; movie);
+ 	bool operator==(const Movie&amp; movie) const;
+ 	bool operator&lt;(const Movie&amp; movie) const;
+ 	bool operator&lt;=(const Movie&amp; movie) const;
+ 	bool operator&gt;(const Movie&amp; movie) const;
+ 	bool operator&gt;=(const Movie&amp; movie) const;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>882</x>
      <y>1463</y>
      <w>322</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>User(Client)
--
--

- UnsortedLinkedList&lt;Movie*&gt; movieHistory;
--
+ writeSearchHistory(std::string path);
+ bool loadSearchHistory(std::string path);</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1316</x>
      <y>1610</y>
      <w>21</w>
      <h>196</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;260.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>553</x>
      <y>1666</y>
      <w>595</w>
      <h>392</h>
    </coordinates>
    <panel_attributes>namespace GUI
--
--
public:
/*Helper methods */
bool isValidName(std::string name);
bool isValidDay(std::string day);
bool isValidMonth(std::string month);
bool isValidYear(std::string month);
int menu_prompt(const std::string prompt, // Message to prompt the user to select an option.
		const std::string choices[], // Array of choices to provide to the user.
		int choices_length // Number of items in the choices array.
		);
		
/*GUI functions */
void UI_search(const TableDatabase &amp; db);
// Search help funciton
//void UI_search(/*const database&amp; database*/);
void UI_search_by_title(std::string in_title/*,const database&amp; database*/);
void UI_search_by_year(int in_year/*,const database&amp; database*/);
void UI_search_by_ratings(double in_ratings/*,const database&amp; database*/);
void UI_search_by_genre(std::string in_genre/*,const database&amp; database*/);
void UI_search_by_cast(std::string in_genre/*,const database&amp; database*/);	
// Add help funciton
void UI_add(TableDatabase&amp; db);
// Remove help funciton
void UI_remove(TableDatabase &amp; db);
void promptLoadFile(TableDatabase &amp; db);
// Edit help funciton
void UI_edit(TableDatabase &amp; db);
void UI_run_application();
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>882</x>
      <y>1309</y>
      <w>280</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>ApplicationDriver(main)
--
--
1. create the database
2. create the user obj
3. call user.run --&gt; show GUI and etc.
4. save to file the current database</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1008</x>
      <y>1414</y>
      <w>21</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;70.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1155</x>
      <y>1127</y>
      <w>168</w>
      <h>266</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>220.0;10.0;80.0;10.0;80.0;360.0;10.0;360.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>497</x>
      <y>959</y>
      <w>154</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>LinkedList&lt;T&gt;
--
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>497</x>
      <y>1148</y>
      <w>119</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>LinkNode&lt;T&gt;
--
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>819</x>
      <y>826</y>
      <w>154</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>BinaryNode&lt;T&gt;
--
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>609</x>
      <y>1092</y>
      <w>112</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>HeadNode&lt;T&gt;
--
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>497</x>
      <y>868</y>
      <w>126</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Queue&lt;T&gt;
--
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>539</x>
      <y>931</y>
      <w>21</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;40.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>609</x>
      <y>1127</y>
      <w>49</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;60.0;50.0;60.0;50.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>539</x>
      <y>840</y>
      <w>21</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>497</x>
      <y>791</y>
      <w>154</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
QueueInterface
--
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>644</x>
      <y>980</y>
      <w>679</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;950.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>273</x>
      <y>1120</y>
      <w>154</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>HashTable&lt;T&gt;
--
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>819</x>
      <y>651</y>
      <w>154</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>BinarySearchTree&lt;T&gt;
--
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>819</x>
      <y>742</y>
      <w>154</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>BinaryNodeTree&lt;T&gt;
--
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>882</x>
      <y>791</y>
      <w>21</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;50.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>616</x>
      <y>763</y>
      <w>217</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;180.0;180.0;180.0;180.0;10.0;290.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>882</x>
      <y>700</y>
      <w>21</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1008</x>
      <y>742</y>
      <w>154</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
TreeInterface
--
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>966</x>
      <y>763</y>
      <w>56</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>966</x>
      <y>672</y>
      <w>357</w>
      <h>231</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;390.0;10.0;390.0;310.0;490.0;310.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>273</x>
      <y>1211</y>
      <w>119</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>HashNode&lt;K,V&gt;
--
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>301</x>
      <y>1169</y>
      <w>21</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>406</x>
      <y>1169</y>
      <w>56</w>
      <h>224</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>60.0;300.0;10.0;300.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2800</x>
      <y>721</y>
      <w>665</w>
      <h>413</h>
    </coordinates>
    <panel_attributes>namespace StringUtil
--
--
std::string				strip(const std::string&amp; str);
std::string				uppercase(const std::string&amp;);
List&lt;std::string&gt;*		split(const std::string&amp; str, const std::string delim);
std::string				join(const List&lt;std::string&gt;&amp; tokens);
std::string				lowercase(const std::string&amp; str);
std::string				lstrip(const std::string&amp; str);
std::string				rstrip(const std::string&amp; str);
bool					contains(std::string mainStr, std::string substrToVerify);
/* Replace all the substrings found (to_search) in the data str
returning a modified string without mutating original input string
@param data is the string format
@param to_search is the substring to find in the data string and replace
@param replace_str is the string to replace the found(to_search) substrings 
in the data string
@pre none
@post none
@return a string is formatted and reflects the changes from the input args */
std::string				replace(const std::string&amp; data, const std::string&amp; to_search, const std::string&amp; replace_str);
/* Returns true if the string contains any characters of the alphabet 
@param data is the string to search
@pre none
@post none
@return true if the string contains a character of the alphabet else false */
bool					containsAlpha(const std::string&amp; data);
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1309</x>
      <y>875</y>
      <w>539</w>
      <h>742</h>
    </coordinates>
    <panel_attributes>NotIMDB_Database
--
--
private:
/* Attributes */
- BST&lt;std::string&gt; 							__moviesSortedByYear;
- BST&lt;std::string&gt; 							__moviesSortedByRating;
- BST&lt;std::string&gt; 							__actorNames;
- BST&lt;std::string&gt; 							__movieTitles;
- HashTable&lt;Movie*&gt;							__movieDB;
- HashTable&lt;Actor&gt;							__actorDB;

/* internal helper methods */
- void __loadMovies(List&lt;Movie&gt;* movies);
- void __loadActors(List&lt;Actor&gt;* actors); 

--
public:
/* DatabaseIO */
+ loadFromFile(string t_name);
// save to a default path or a custom path/name
+ saveToFile(string t_name = "");	

/* == CRUD methods == */
// return false if not found
+ bool readMovie(std::string) const;
// return false if not found
+ bool readActor(std::string) const;

/* CREATE */
+ bool createMovie(const Movie&amp; newMovie)
+ bool createActor(const Actor&amp; newActor);

/* DELETE */
+ bool deleteMovie(std::string movieName) // utilize stack for undo actions
+ bool deleteActor(std::string actorName)	// utilize stack for undo actions

/* UPDATE */
// find movie by oldName, hold a copy of the movie delete movie of old name, update copy to newName, finally 
// add back into table
+ bool updateMovieName(std::string oldMovieName, std::string newMovieName);
+ bool updateMovieYear(std::string key, std::string newYearReleased);
+ bool updateMovieID(std::string key, std::string newID);
+ bool updateMovieRuntime(std::string key, std::string newRuntime);
# op 0 appends to the genre string, op 1 sets the genre to newGenreName
+ bool updateMovieGenre(std::string key, std::string newGenreName, int op);
+ bool updateMovieRating(std::string key, std::string newKey);

+ bool updateActorName(std::string oldActorName, std::string newActorName):
+ bool updateActorBirthYear(std::string key, std::string newBirthYear);
+ bool updateActorDeathYear(std::string key, std::string newDeathYear);
# 0 to append to old string, 1 to set
+ bool updateActorRoles(std::string key, std::string newRoleName, int op);
+ bool updateActorID(std::string key, std::string newID);


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>203</x>
      <y>1134</y>
      <w>84</w>
      <h>728</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>10.0;1020.0;10.0;10.0;100.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2030</x>
      <y>1127</y>
      <w>658</w>
      <h>707</h>
    </coordinates>
    <panel_attributes>Actor
--
--
/* Attributes */
private:
std::string				__actorID;	// nconst
//  list of associated movieids ie keys however can also be the hashed ids as well
// using the raw keys would require hashing to find from a table of movies
std::string				__name;
std::string				__birthYear;
std::string				__deathYear;
std::string				__roles;
List&lt;std::string&gt;*		__movieIDs;
List&lt;Movie*&gt;*			__movies;	// populate after adding to hashtable?
/*toggle between various comparisons:
1 by actorID (DEFAULT CTOR VALUE) 
2 by name
3 by birthYear */
int						__compareConfig;

--

public:
/* Ctors &amp; Dtor */
+ Actor();
+ Actor(std::string tconstID, std::string name, std::string birthyear, std::string deathYear,
	std::string roles, const List&lt;std::string&gt;&amp; movieIDs);
+ ~Actor() { clear;  }
+ void clear();

/* Mutators  */
// add movie 
bool addMovie(std::string movieName);	// adds an association if the movie exists on the movieDB 
bool removeMovie(std::string movieName );	// remove association, does not directly delete the movie

/* Getters */
+ void readFullInfo() const;
+ std::string					getID() const;
+ std::string					getName() const { return __name; }
+ List&lt;std::string&gt;			getMovieIDs() const { return *__movieIDs; }
+ List&lt;std::string 			getMovieTitles() const;

/* Operator Overloads */
+ friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const Actor&amp; actor);
+ bool operator==(const Actor&amp; actor) const;
+ bool operator&lt;(const Actor&amp; actor) const;
+ bool operator&gt;(const Actor&amp; actor) const;
+ bool operator&lt;=(const Actor&amp; actor) const;
+ bool operator&gt;=(const Actor&amp; actor) const;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2009</x>
      <y>154</y>
      <w>553</w>
      <h>672</h>
    </coordinates>
    <panel_attributes>namespace FileIO
--
--
static const std::string BAR_DELIM = "|";
/* Builds a list of people from a .txt file. White spaces are 
accounted for an do not affect list creation. Order
of names and dates must follow the following format:
person1_name
YYYY-MM-DD
person2_name
YYYY-MM-DD
person3_name
YYYY-MM-DD
@return pointer to a list of people constructed */

List&lt;Person&gt;* buildPersonListFromFile(std::string);
/* Builds a list of people from a .txt file of names. 
@return pointer to a list of names 
@param path is the full path to the target file */
List&lt;std::string&gt;* buildNameListFromFile(std::string path);
/* Builds a list of dates from a .txt file of dates of
the following format:
YYYY-MM-DD
@return pointer to a list of names
@param path is the full path to the target file */

List&lt;std::string&gt;* buildDateListFromFile(std::string path);

void writeTableToFile(std::string path,
	const List&lt;std::string&gt;&amp; keys,   HashTable&lt;Person&gt;&amp; table);	
/* Reads a .tsv file following the format:
tconst | primaryTitle | startYear | runtimeMinutes | genre1, genre2, ... , genre-n 
The list is sorted in accordance to tconst, a tag for building the list
of associated movies contained in an Actor object */

List&lt;Movie&gt;* buildMovieList(std::string path);
/* Reads from a .tsv file following the format:
nconst | primaryName | birthYear | deathYear | primaryProfession | knownForTitles */

List&lt;Actor&gt;* buildActorList(std::string path);
/* Function useds for multhreading */

void loadActorsIntoList(std::string path, List&lt;Actor&gt;* actors);
void loadMoviesIntoList(std::string path, List&lt;Movie&gt;* movie);
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>1848</y>
      <w>483</w>
      <h>343</h>
    </coordinates>
    <panel_attributes>namespace HashUtil
--
--
/* Hash a date by summing up the individual integer
values in a date string
@pre input string parameter is assumed to follow the format: YYYY-MM-DD
@post string is hashed to a value less than or equal to 9 
@return computed size_t hash value */
size_t hashBirthday(const std::string&amp; str);
size_t hashStringFold(const std::string &amp; str, size_t byteSize);
size_t hash_UNIX_ELF(std::string name);
size_t hashStringFold(const std::string &amp; str, int byteSize);
//uint64_t 
unsigned int RSHash(const std::string &amp; str);

unsigned int JSHash(const std::string &amp; str);

unsigned int SDBMHash(const char * str, unsigned int length);

unsigned int DJBHash(const char * str, unsigned int length);

unsigned int DEKHash(const char * str, unsigned int length);
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1323</x>
      <y>0</y>
      <w>490</w>
      <h>595</h>
    </coordinates>
    <panel_attributes>namespace MathUtil
--
--
// holds value of the last generated prime number array
// resets at the start of a new generation
extern size_t		ATKINS_ARRAY_SIZE;
const size_t		MAX_PRIME = 207239;
/* Generates an array of prime numbers less than the
specified limit using an implementation of the Sieve of Atkin's algorithm
@parameter limit bounds the prime number generator
@return an array of prime numbers less than limit */
size_t*				generatePrimesAtkins(size_t limit);
/* This function tests for primality using an implementation
of based on the Miller-Rabins Primality Test
@param k is an input parameter that determines
accuracy level. Higher value of k indicates more accuracy.
@param n is the integer to be tested
@return returns false if n is composite and returns true if n
is probably prime.   */
bool				isPrimeMillerRabin(size_t n, int k);
/* Identify an archived prime that is atleast 2 times greater than target
@pre size cannot be greater than 9973 and primes2.txt must exist in
root directory unmodified
@return prime that is greater than or equal to 2 times argument size */
size_t				findPrime(size_t size);
/* Utility function to do modular exponentiation.
@param x is the base
@param y is the exponenet
@param p is the modulus of congruence
@return  (x^y) % p */
int					power(int x, unsigned int y, int p);
/* This function is called for all k trials. It returns
false if n is composite and returns false if n is
probably prime.
@param d is an odd number such that  d*2^r = n - 1 for some r &gt;= 1
@param n is an odd integer to be tested for primality
@return true if n is prime else false if n is composite */
bool				millerTest(int d, int n);

bool isPrime(std::size_t x);
size_t nextPrime(size_t x);</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1841</x>
      <y>1155</y>
      <w>203</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>270.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1736</x>
      <y>1827</y>
      <w>448</w>
      <h>378</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;520.0;620.0;520.0;620.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>301</x>
      <y>532</y>
      <w>1036</w>
      <h>602</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>10.0;840.0;10.0;10.0;1460.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>749</x>
      <y>1351</y>
      <w>147</w>
      <h>329</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>10.0;450.0;10.0;10.0;190.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1841</x>
      <y>980</y>
      <w>973</w>
      <h>35</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>1370.0;30.0;10.0;30.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1841</x>
      <y>819</y>
      <w>434</w>
      <h>126</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>600.0;10.0;600.0;160.0;10.0;160.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2555</x>
      <y>714</y>
      <w>259</w>
      <h>35</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>350.0;30.0;10.0;30.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>532</x>
      <y>1029</y>
      <w>21</w>
      <h>133</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;170.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>637</x>
      <y>1029</y>
      <w>21</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;90.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1022</x>
      <y>1029</y>
      <w>301</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;410.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>875</x>
      <y>1008</y>
      <w>154</w>
      <h>49</h>
    </coordinates>
    <panel_attributes>Stack&lt;T&gt;
--
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>819</x>
      <y>1148</y>
      <w>154</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
StackInterface
--
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>938</x>
      <y>1050</y>
      <w>21</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;140.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>644</x>
      <y>1008</y>
      <w>245</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;330.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>448</x>
      <y>1337</y>
      <w>154</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>List&lt;T&gt;
--
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>469</x>
      <y>980</y>
      <w>42</w>
      <h>371</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>40.0;10.0;10.0;10.0;10.0;510.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>518</x>
      <y>1407</y>
      <w>735</w>
      <h>1050</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;1480.0;1030.0;1480.0</additional_attributes>
  </element>
</diagram>
